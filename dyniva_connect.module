<?php

/**
 * @file
 * Contains dyniva_connect.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\dyniva_connect\Entity\Connection;
use Drupal\Component\Utility\Crypt;

/**
 * Implements hook_help().
 */
function dyniva_connect_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dyniva_connect module.
    case 'help.page.dyniva_connect':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('User connect base function.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function dyniva_connect_theme() {
  $theme = [];
  $theme['connector'] = [
    'render element' => 'elements',
    'file' => 'connector.page.inc',
    'template' => 'connector',
  ];
  $theme['connector_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'connector.page.inc',
  ];
  $theme['connection'] = array(
    'render element' => 'elements',
    'file' => 'connection.page.inc',
    'template' => 'connection',
  );
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function dyniva_connect_theme_suggestions_connector(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#connector'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'connector__' . $sanitized_view_mode;
  $suggestions[] = 'connector__' . $entity->bundle();
  $suggestions[] = 'connector__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'connector__' . $entity->id();
  $suggestions[] = 'connector__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
/**
 * 获取默认 connector
 * 
 * @return \Drupal\dyniva_connect\Entity\Connector|NULL
 */
function dyniva_connect_get_default_connector(){
  $query = \Drupal::entityQuery('connector')
  ->sort('isdefault','DESC');
  $result = $query->execute();
  $id = reset($result);
  return entity_load('connector', $id);
}
/**
 * 
 * @param Connection $connection
 * @return boolean
 */
function dyniva_connect_sync_headimg(Connection $connection) {
  if (empty($connection->getOwnerId()) || empty($connection->headimgurl->value)) {
    return FALSE;
  }
  $account = $connection->getOwner();
  if ($account) {
    // user avatar
    $picture = dyniva_connect_save_image_local($connection->headimgurl->value);
    $account->set('user_picture', $picture);
    $account->save();
    return TRUE;
  }
  return FALSE;
}
/**
 * save image
 */
function dyniva_connect_save_image_local($url) {
  $hash = Crypt::hashBase64($url);
  $external_image = file_get_contents($url);
  $dest = "public://external";
  if(!file_exists($dest)){
    file_prepare_directory($dest,FILE_CREATE_DIRECTORY);
  }
  $external_image_object = file_save_data($external_image,$dest . '/' . $hash . '.jpg', FILE_EXISTS_REPLACE);
  
  return $external_image_object;
}
/**
 * 
 * @param unknown $type
 */
function _dyniva_connect_sync_user_picture($connector_id = NULL){
  $query = \Drupal::entityQuery('connection')
  ->condition('user_id',0,'>');
  if($connector_id){
    $query->condition('connector_id',$connector_id);
  }
  
  $ids = $query->execute();
  $connections = entity_load_multiple('connection',$ids);
  foreach ($connections as $connection){
    \Drupal::queue('sync_connection_user_picture')->createItem($connection);
  }
}